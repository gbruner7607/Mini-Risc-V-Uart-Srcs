
null_test.elf:     file format elf32-littleriscv


Disassembly of section .text:

00010000 <_start>:
   10000:	00001117          	auipc	sp,0x1
   10004:	28010113          	addi	sp,sp,640 # 11280 <_sp0>
   10008:	00000097          	auipc	ra,0x0
   1000c:	00c08093          	addi	ra,ra,12 # 10014 <_endloop>
   10010:	1e4000ef          	jal	ra,101f4 <main>

00010014 <_endloop>:
   10014:	0000006f          	j	10014 <_endloop>

00010018 <uart_put>:
   10018:	fd010113          	addi	sp,sp,-48                               // Sets stack pointer and frame pointer of uart_write_blocking
   1001c:	02812623          	sw	s0,44(sp)
   10020:	03010413          	addi	s0,sp,48

   10024:	00050793          	mv	a5,a0                                      // (char *)
   10028:	fcf40fa3          	sb	a5,-33(s0)

   1002c:	aaaaa7b7          	lui	a5,0xaaaaa                              // volatile char *p = (char *)0xaaaaa400;
   10030:	40078793          	addi	a5,a5,1024 # aaaaa400 <_sp0+0xaaa99180>
   10034:	fef42623          	sw	a5,-20(s0)

   10038:	fec42783          	lw	a5,-20(s0)                                 // *p = c;
   1003c:	fdf44703          	lbu	a4,-33(s0)
   10040:	00e78023          	sb	a4,0(a5)

   10044:	00000013          	nop                                           // void return
   10048:	02c12403          	lw	s0,44(sp)
   1004c:	03010113          	addi	sp,sp,48
   10050:	00008067          	ret

00010054 <uart_poll>:
   10054:	fe010113          	addi	sp,sp,-32                               // Sets stack pointer and frame pointer of uart_write_blocking
   10058:	00812e23          	sw	s0,28(sp)
   1005c:	02010413          	addi	s0,sp,32

   10060:	aaaaa7b7          	lui	a5,0xaaaaa                              // volatile char *p = (char *)0xaaaaa404;
   10064:	40478793          	addi	a5,a5,1028 # aaaaa404 <_sp0+0xaaa99184>
   10068:	fef42623          	sw	a5,-20(s0)

   1006c:	fec42783          	lw	a5,-20(s0)                                 // return *p;
   10070:	0007c783          	lbu	a5,0(a5)
   10074:	0ff7f793          	andi	a5,a5,255
   10078:	00078513          	mv	a0,a5
   1007c:	01c12403          	lw	s0,28(sp)
   10080:	02010113          	addi	sp,sp,32
   10084:	00008067          	ret

00010088 <uart_write_blocking>:
   10088:	fd010113          	addi	sp,sp,-48                           // Sets stack pointer and frame pointer of uart_write_blocking
   1008c:	02112623          	sw	ra,44(sp)
   10090:	02812423          	sw	s0,40(sp)
   10094:	03010413          	addi	s0,sp,48

   10098:	00050793          	mv	a5,a0                                  // (char c)
   1009c:	fcf40fa3          	sb	a5,-33(s0)

   100a0:	fb5ff0ef          	jal	ra,10054 <uart_poll>                // uart_poll()
   100a4:	00050793          	mv	a5,a0
   100a8:	0027f793          	andi	a5,a5,2                             // & 2;
   100ac:	fef407a3          	sb	a5,-17(s0)                             // s =
   100b0:	fef44783          	lbu	a5,-17(s0)
   100b4:	fe0796e3          	bnez	a5,100a0 <uart_write_blocking+0x18> // do {} while (s != 0);

   100b8:	fdf44783          	lbu	a5,-33(s0)                          // uart_put(c);
   100bc:	00078513          	mv	a0,a5
   100c0:	f59ff0ef          	jal	ra,10018 <uart_put>

   100c4:	00000013          	nop                                       // void return
   100c8:	02c12083          	lw	ra,44(sp)
   100cc:	02812403          	lw	s0,40(sp)
   100d0:	03010113          	addi	sp,sp,48
   100d4:	00008067          	ret

000100d8 <itoa>:
   100d8:	fd010113          	addi	sp,sp,-48 // Sets stack pointer and frame pointer of itoa
   100dc:	02812623          	sw	s0,44(sp)
   100e0:	03010413          	addi	s0,sp,48

   100e4:	fca42e23          	sw	a0,-36(s0)   // (int a, char *c)
   100e8:	fcb42c23          	sw	a1,-40(s0)

   100ec:	fe042623          	sw	zero,-20(s0) // int idx = 0;

   100f0:	fdc42783          	lw	a5,-36(s0)   // a
   100f4:	0ff7f713          	andi	a4,a5,255
   100f8:	fec42783          	lw	a5,-20(s0)   // c[idx]
   100fc:	fd842683          	lw	a3,-40(s0)
   10100:	00f687b3          	add	a5,a3,a5
   10104:	03070713          	addi	a4,a4,48  // = a + INT_OFFSET;
   10108:	0ff77713          	andi	a4,a4,255
   1010c:	00e78023          	sb	a4,0(a5)

   10110:	fec42783          	lw	a5,-20(s0)   // c[idx + 1]
   10114:	00178793          	addi	a5,a5,1
   10118:	fd842703          	lw	a4,-40(s0)
   1011c:	00f707b3          	add	a5,a4,a5
   10120:	00078023          	sb	zero,0(a5)   // = '\0';

   10124:	00000013          	nop             // void return
   10128:	02c12403          	lw	s0,44(sp)
   1012c:	03010113          	addi	sp,sp,48
   10130:	00008067          	ret

00010134 <strlen>:
   10134:	fd010113          	addi	sp,sp,-48              // Sets stack pointer and frame pointer of strlen
   10138:	02812623          	sw	s0,44(sp)
   1013c:	03010413          	addi	s0,sp,48

   10140:	fca42e23          	sw	a0,-36(s0)                // (char c[])

   10144:	fdc42783          	lw	a5,-36(s0)                // char *ptr = &c[0]
   10148:	fef42423          	sw	a5,-24(s0)

   1014c:	fe042623          	sw	zero,-20(s0)              // int offset = 0;

   10150:	0100006f          	j	10160 <strlen+0x2c>       // while ()

   10154:	fec42783          	lw	a5,-20(s0)                // offset++;
   10158:	00178793          	addi	a5,a5,1
   1015c:	fef42623          	sw	a5,-20(s0)

   10160:	fec42783          	lw	a5,-20(s0)                // while (*(ptr + offset) !=)
   10164:	fe842703          	lw	a4,-24(s0)
   10168:	00f707b3          	add	a5,a4,a5
   1016c:	0007c783          	lbu	a5,0(a5)

   10170:	fe0792e3          	bnez	a5,10154 <strlen+0x20> // while (!= '\0')

   10174:	fec42783          	lw	a5,-20(s0)                // return offset;
   10178:	00078513          	mv	a0,a5
   1017c:	02c12403          	lw	s0,44(sp)
   10180:	03010113          	addi	sp,sp,48
   10184:	00008067          	ret

00010188 <uart_print>:
   10188:	fd010113          	addi	sp,sp,-48                      // Sets stack pointer and frame pointer of uart_print
   1018c:	02112623          	sw	ra,44(sp)
   10190:	02812423          	sw	s0,40(sp)
   10194:	03010413          	addi	s0,sp,48

   10198:	fca42e23          	sw	a0,-36(s0)                        // (char c[])

   1019c:	fdc42503          	lw	a0,-36(s0)                        // int len = strlen(c);
   101a0:	f95ff0ef          	jal	ra,10134 <strlen>
   101a4:	fea42423          	sw	a0,-24(s0)

   101a8:	fe042623          	sw	zero,-20(s0)                      // for (int i = 0;;)

   101ac:	0280006f          	j	101d4 <uart_print+0x4c>           // for ()

   101b0:	fec42783          	lw	a5,-20(s0)                        // uart_write_blocking(c[i]);
   101b4:	fdc42703          	lw	a4,-36(s0)
   101b8:	00f707b3          	add	a5,a4,a5
   101bc:	0007c783          	lbu	a5,0(a5)
   101c0:	00078513          	mv	a0,a5
   101c4:	ec5ff0ef          	jal	ra,10088 <uart_write_blocking>

   101c8:	fec42783          	lw	a5,-20(s0)                        // for (;; i++)
   101cc:	00178793          	addi	a5,a5,1
   101d0:	fef42623          	sw	a5,-20(s0)

   101d4:	fec42703          	lw	a4,-20(s0)                        // for (; i < len;)
   101d8:	fe842783          	lw	a5,-24(s0)
   101dc:	fcf74ae3          	blt	a4,a5,101b0 <uart_print+0x28>

   101e0:	00000013          	nop                                  // void return
   101e4:	02c12083          	lw	ra,44(sp)
   101e8:	02812403          	lw	s0,40(sp)
   101ec:	03010113          	addi	sp,sp,48
   101f0:	00008067          	ret

000101f4 <main>:
   101f4:	fd010113          	addi	sp,sp,-48             // Sets stack pointer and frame pointer of main.
   101f8:	02112623          	sw	ra,44(sp)
   101fc:	02812423          	sw	s0,40(sp)
   10200:	03010413          	addi	s0,sp,48

   10204:	fdc40793          	addi	a5,s0,-36             // unsigned char buffer[20]; itoa(2, buffer);
   10208:	00078593          	mv	a1,a5
   1020c:	00200513          	li	a0,2
   10210:	ec9ff0ef          	jal	ra,100d8 <itoa>

   10214:	fdc40793          	addi	a5,s0,-36             // uart_print(buffer);
   10218:	00078513          	mv	a0,a5
   1021c:	f6dff0ef          	jal	ra,10188 <uart_print>

   10220:	fdc40793          	addi	a5,s0,-36             // itoa(3, buffer);
   10224:	00078593          	mv	a1,a5
   10228:	00300513          	li	a0,3
   1022c:	eadff0ef          	jal	ra,100d8 <itoa>

   10230:	fdc40793          	addi	a5,s0,-36             // uart_print(buffer);
   10234:	00078513          	mv	a0,a5
   10238:	f51ff0ef          	jal	ra,10188 <uart_print>

   1023c:	00000793          	li	a5,0                     // return 0;
   10240:	00078513          	mv	a0,a5
   10244:	02c12083          	lw	ra,44(sp)
   10248:	02812403          	lw	s0,40(sp)
   1024c:	03010113          	addi	sp,sp,48
   10250:	00008067          	ret
